image: docker:20.10.16

services:
  - docker:20.10.16-dind

variables:
  AWS_DEFAULT_REGION: us-east-1
  DOCKER_TLS_CERTDIR: "/certs"
  EC2_IP: "${EC2_PUBLIC_IP}" # Replace with your EC2 IP

stages:
  - test
  - build
  - deploy
  - monitor

test:
  image: python:3.9-slim
  services: []
  before_script:
    - python -m pip install --upgrade pip
  script:
    - cd backend/services/auth_service
    - pip install -r requirements.txt
    - pip install pytest
    - python -m pytest tests/ || true

build:
  stage: build
  before_script:
    - docker login -u $DOCKER_USERNAME -p $DOCKER_HUB_PERSONAL_ACESS_TOKEN
  script:
    - docker-compose build --no-cache
    - docker images
    - docker tag videostreaming_devops_project_gitlab_frontend:latest ${DOCKER_REPO}:frontend
    - docker tag videostreaming_devops_project_gitlab_video_service:latest ${DOCKER_REPO}:video_service
    - docker tag videostreaming_devops_project_gitlab_watchlist_service:latest ${DOCKER_REPO}:watchlist_service
    - docker tag videostreaming_devops_project_gitlab_auth_service:latest ${DOCKER_REPO}:auth_service
    - docker images
    - docker push ${DOCKER_REPO}:frontend
    - docker push ${DOCKER_REPO}:video_service
    - docker push ${DOCKER_REPO}:watchlist_service
    - docker push ${DOCKER_REPO}:auth_service

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client python3 py3-pip aws-cli
  script:
    - |
      # Configure AWS credentials
      echo "============ Checking AWS Credentials ============"
      echo "AWS Access Key ID: ${AWS_ACCESS_KEY_ID}"
      echo "AWS Secret Access Key: ${AWS_SECRET_ACCESS_KEY}"
      echo "AWS Session Token: ${AWS_SESSION_TOKEN}"
      echo "AWS Region: ${AWS_DEFAULT_REGION}"
      echo "============ Checking other Credentials ============"
      echo "SSH private key: $SSH_PRIVATE_KEY"
      echo "CI registry: $CI_REGISTRY"
      echo "CI registry user: $CI_REGISTRY_USER"
      echo "CI registry password: $CI_REGISTRY_PASSWORD"
      echo "============ End Credentials Check ============"
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set aws_session_token $AWS_SESSION_TOKEN
    - aws configure set region $AWS_DEFAULT_REGION

    # setups dependicies
    - apk update && apk add --no-cache curl openssh-client python3 py3-pip aws-cli
    # Verify the installations
    - aws --version
    - python3 --version
    - ssh -V

    # Update frontend config with EC2 IP
    - sed -i "s|localhost|$EC2_IP|g" frontend/src/config/api.config.ts

    # Save the private SSH key to a temporary file and set permissions
    - echo "$SSH_PRIVATE_KEY" > private_key.pem
    - chmod 600 private_key.pem
    - touch .env
    # Copy remote.docker-compose.yml to EC2 using the saved private key
    - scp -o StrictHostKeyChecking=no -i private_key.pem remote.docker-compose.yml ec2-user@$EC2_IP:~/docker-compose.yml

    - |
      cat > .env << EOF
      MONGODB_URI=${MONGODB_URI}
      JWT_SECRET_KEY=${JWT_SECRET_KEY}
      JWT_REFRESH_SECRET_KEY=${JWT_REFRESH_SECRET_KEY}
      AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
      AWS_REGION=${AWS_REGION}
      S3_BUCKET=${S3_BUCKET}
      CI_REGISTRY=${CI_REGISTRY}
      CI_REGISTRY_USER=${CI_REGISTRY_USER}
      CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}
      EC2_PUBLIC_IP=${EC2_IP}
      DOCKER_REPO=${DOCKER_REPO}
      DEPLOYMENT_ENV=${DEPLOYMENT_ENV}
      EOF

    # Copy .env file to EC2 using the saved private key
    - scp -o StrictHostKeyChecking=no -i private_key.pem .env ec2-user@$EC2_IP:~/

    # Remove trailing white spaces and new lines from haproxy.cfg
    - sed -i 's/[ \t]*$//' haproxy.cfg
    - sed -i ':a;N;$!ba;s/\n$//' haproxy.cfg

    # Copy haproxy config
    - scp -o StrictHostKeyChecking=no -i private_key.pem haproxy.cfg ec2-user@$EC2_IP:~/haproxy.cfg

    - |
      ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$EC2_IP <<EOF
      echo "Starting deployment process..."
      echo "Running docker sync script..."
      ./docker_sync.sh
      echo "Current user: $(whoami)"

      echo "Stopping all containers..."
      docker-compose down

      echo "Pruning old containers..."
      docker system prune -f

      echo "Pulling Docker images..."
      docker pull ${DOCKER_REPO}:frontend
      docker pull ${DOCKER_REPO}:video_service
      docker pull ${DOCKER_REPO}:watchlist_service
      docker pull ${DOCKER_REPO}:auth_service

      echo "Starting Docker containers..."
      docker-compose up -d

      echo "Configuring HAProxy..."
      # Backup existing config if present
      echo "Backing up existing HAProxy config..."
      sudo cp -f /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.backup || true

      echo "Installing new HAProxy config..."
      sudo mv ~/haproxy.cfg /etc/haproxy/haproxy.cfg

      echo "Updating haproxy with new config..."
      ./update_haproxy.sh

      echo "verifying HAProxy config..."
      sudo haproxy -c -f /etc/haproxy/haproxy.cfg

      echo "Restarting HAProxy service..."
      sudo systemctl restart haproxy
      sudo systemctl enable haproxy
      sudo systemctl status haproxy

      echo "Deployment complete!"
      EOF

    # Remove the temporary private key file
    - rm -f private_key.pem

monitor:
  stage: monitor
  image: python:3.11-slim
  before_script:
    - python -m pip install boto3
  script:
    - python setup_monitoring.py
